var c=r=>r!==void 0;var u=r=>typeof r=="string";var f=r=>s=>s[r];var y=r=>Array.from(new Set(r));var B=r=>Object.fromEntries(Object.entries(r).map(([s,e])=>s!=="i"&&e&&e!="0"&&[s,e]).filter(Boolean)),k=r=>Object.fromEntries(Object.keys(r).map(s=>{let e=r[s];return[s,Array.isArray(e)?e.map(t=>t==null?void 0:t.trim()):e===!!e?e:e==null?void 0:e.trim()]})),w=r=>{let[s="",...e]=r.split("|"),[t="",o]=s.split(":"),[a,n]=t.split("?");return{k:a,i:o,n:n==="",f:e}},T=r=>!!(r.o||r.r),b=(r,s)=>{let[e,t]=r.split(":");t||(t=e,e=s);let o=t.split("|"),[a,n,i,l,p,P]=o,m=o.filter(A=>A!==void 0).length;return m===1?{k:e,r:a}:m===2?{k:e,o:a,r:n}:m===3?{k:e,z:a,o:n,r:i}:{k:e,z:a,o:n,t:i,f:l,m:p,r:P}},N=/^\{.*\}$/,S=r=>Object.fromEntries(x(r).split(",").map(s=>s.split(":")).reduce((s,e)=>e.length===2?[...s,e.map(t=>t.trim())]:(s[s.length-1][1]+=","+e[0],s),[])),g=/(\{(?:[^{}]+|\{(?:[^{}]+)*\})*\})/g,x=r=>r.substring(1,r.length-1),E=(r,s=!0,e="",t="")=>r.split(g).map(o=>{if(!o.match(g))return o;let a=x(o);if(a.startsWith("{"))return b(x(a),t);let n=w(a);return t=n.k||t,!e&&(e=t),n}).map(o=>{if(typeof o=="string")return o;o.k||(o.k=e||"0");let a=k(o);return s?B(a):a});var C=r=>r.kind==="text",d=r=>r.kind==="plural",h=r=>r.kind==="parameter";var F=r=>r.kind==="switch-case",v=r=>U(E(r,!1).map(D).filter(c)),D=r=>u(r)?r?M(r):void 0:T(r)?j(r):O(r),M=r=>({kind:"text",content:r}),j=({k:r,z:s,o:e,t,f:o,m:a,r:n})=>({kind:"plural",key:r,...s?{zero:s}:void 0,...e?{one:e}:void 0,...t?{two:t}:void 0,...o?{few:o}:void 0,...a?{many:a}:void 0,other:n}),O=({k:r,i:s,n:e,f:t})=>({kind:"parameter",key:r,types:s?[s]:[],optional:e||!1,transforms:(t||[]).map(z)}),z=r=>r.match(N)?{kind:"switch-case",cases:Object.entries(S(r)).map(([e,t])=>({key:e,value:t})),raw:r}:{kind:"formatter",name:r},U=r=>{let s=r.filter(h),e=r.filter(d),t={};return s.forEach(({key:o,types:a,transforms:n,optional:i})=>{var p,P;let l=a.length?a:$(n);t[o]={types:y([...((p=t[o])==null?void 0:p.types)||[],...l]).filter(c),optional:((P=t[o])==null?void 0:P.optional)||i}}),e.forEach(({key:o})=>{var a;(a=t[o])!=null&&a.types.length||(t[o]={types:["string","number","boolean"],optional:!1})}),Object.keys(t).forEach(o=>{var a,n;(a=t[o])!=null&&a.types.length||(t[o]={types:["unknown"],optional:((n=t[o])==null?void 0:n.optional)||!1})}),Object.entries(t).forEach(([o,a])=>{let n=s.find(i=>i.key===o);!n||(n.types=a.types,n.optional=n.optional||a.optional)}),r};var $=r=>{if(!(r!=null&&r.length))return[];let s=r[0];return F(s)?s.cases.map(f("key")).map(t=>t==="*"?"string":`'${t}'`):[]};var Z=r=>r.map(R).join("");var R=r=>C(r)?r.content:d(r)?_(r):I(r),_=({zero:r,one:s,two:e,few:t,many:o,other:a})=>`{{${[r,s,e,t,o,a].filter(n=>n!==void 0).join("|")}}}`,I=({key:r,optional:s,types:e,transforms:t})=>{let o=e.length===1?e[0]==="unknown"?void 0:e[0]:void 0;return`{${r}${o?`:${o}`:""}${s?"?":""}${t.length?`|${t.map(W).join("|")}`:""}}`},W=r=>r.kind==="formatter"?r.name:r.raw||G(r),G=r=>`{${r.cases.map(({key:s,value:e})=>`${s}:${e}`).join(",")}}`;export{v as experimentalParseMessage,Z as experimentalSerializeMessage};
