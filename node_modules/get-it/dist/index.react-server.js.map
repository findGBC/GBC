{"version":3,"file":"index.react-server.js","sources":["../src/request/browser/fetchXhr.ts","../src/request/browser-request.ts","../src/index.browser.ts","../src/index.react-server.ts"],"sourcesContent":["/**\n * Mimicks the XMLHttpRequest API with only the parts needed for get-it's XHR adapter\n */\nexport class FetchXhr\n  implements Pick<XMLHttpRequest, 'open' | 'abort' | 'getAllResponseHeaders' | 'setRequestHeader'>\n{\n  /**\n   * Public interface, interop with real XMLHttpRequest\n   */\n  onabort: () => void\n  onerror: (error?: any) => void\n  onreadystatechange: () => void\n  ontimeout: XMLHttpRequest['ontimeout']\n  /**\n   * https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readyState\n   */\n  readyState: 0 | 1 | 2 | 3 | 4 = 0\n  response: XMLHttpRequest['response']\n  responseText: XMLHttpRequest['responseText']\n  responseType: XMLHttpRequest['responseType'] = ''\n  status: XMLHttpRequest['status']\n  statusText: XMLHttpRequest['statusText']\n  withCredentials: XMLHttpRequest['withCredentials']\n\n  /**\n   * Private implementation details\n   */\n  #method: string\n  #url: string\n  #resHeaders: string\n  #headers: Record<string, string> = {}\n  #controller?: AbortController\n  #init: RequestInit = {}\n  #useAbortSignal: boolean\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars -- _async is only declared for typings compatibility\n  open(method: string, url: string, _async?: boolean) {\n    this.#method = method\n    this.#url = url\n    this.#resHeaders = ''\n    this.readyState = 1 // Open\n    this.onreadystatechange()\n    this.#controller = undefined\n  }\n  abort() {\n    if (this.#controller) {\n      this.#controller.abort()\n    }\n  }\n  getAllResponseHeaders() {\n    return this.#resHeaders\n  }\n  setRequestHeader(name: string, value: string) {\n    this.#headers[name] = value\n  }\n  // Allow setting extra fetch init options, needed for runtimes such as Vercel Edge to set `cache` and other options in React Server Components\n  setInit(init: RequestInit, useAbortSignal = true) {\n    this.#init = init\n    this.#useAbortSignal = useAbortSignal\n  }\n  send(body: BodyInit) {\n    const textBody = this.responseType !== 'arraybuffer'\n    const options: RequestInit = {\n      ...this.#init,\n      method: this.#method,\n      headers: this.#headers,\n      body,\n    }\n    if (typeof AbortController === 'function' && this.#useAbortSignal) {\n      this.#controller = new AbortController()\n      // The instanceof check ensures environments like Edge Runtime, Node 18 with built-in fetch\n      // and more don't throw if `signal` doesn't implement`EventTarget`\n      // Native browser AbortSignal implements EventTarget, so we can use it\n      if (typeof EventTarget !== 'undefined' && this.#controller.signal instanceof EventTarget) {\n        options.signal = this.#controller.signal\n      }\n    }\n\n    // Some environments (like CloudFlare workers) don't support credentials in\n    // RequestInitDict, and there doesn't seem to be any easy way to check for it,\n    // so for now let's just make do with a document check :/\n    if (typeof document !== 'undefined') {\n      options.credentials = this.withCredentials ? 'include' : 'omit'\n    }\n\n    fetch(this.#url, options)\n      .then((res): Promise<string | ArrayBuffer> => {\n        res.headers.forEach((value: any, key: any) => {\n          this.#resHeaders += `${key}: ${value}\\r\\n`\n        })\n        this.status = res.status\n        this.statusText = res.statusText\n        this.readyState = 3 // Loading\n        return textBody ? res.text() : res.arrayBuffer()\n      })\n      .then((resBody) => {\n        if (typeof resBody === 'string') {\n          this.responseText = resBody\n        } else {\n          this.response = resBody\n        }\n        this.readyState = 4 // Done\n        this.onreadystatechange()\n      })\n      .catch((err: Error) => {\n        if (err.name === 'AbortError') {\n          this.onabort()\n          return\n        }\n\n        this.onerror?.(err)\n      })\n  }\n}\n","import parseHeaders from 'parse-headers'\n\nimport type {HttpRequest, MiddlewareResponse, RequestAdapter, RequestOptions} from '../types'\nimport {FetchXhr} from './browser/fetchXhr'\n\n// Use fetch if it's available, non-browser environments such as Deno, Edge Runtime and more provide fetch as a global but doesn't provide xhr\nexport const adapter: RequestAdapter = typeof XMLHttpRequest === 'function' ? 'xhr' : 'fetch'\n\n// Fallback to fetch-based XHR polyfill for non-browser environments like Workers\nconst XmlHttpRequest = adapter === 'xhr' ? XMLHttpRequest : FetchXhr\n\nexport const httpRequester: HttpRequest = (context, callback) => {\n  const opts = context.options\n  const options = context.applyMiddleware('finalizeOptions', opts) as RequestOptions\n  const timers: any = {}\n\n  // Allow middleware to inject a response, for instance in the case of caching or mocking\n  const injectedResponse = context.applyMiddleware('interceptRequest', undefined, {\n    adapter,\n    context,\n  })\n\n  // If middleware injected a response, treat it as we normally would and return it\n  // Do note that the injected response has to be reduced to a cross-environment friendly response\n  if (injectedResponse) {\n    const cbTimer = setTimeout(callback, 0, null, injectedResponse)\n    const cancel = () => clearTimeout(cbTimer)\n    return {abort: cancel}\n  }\n\n  // We'll want to null out the request on success/failure\n  let xhr = new XmlHttpRequest()\n\n  if (xhr instanceof FetchXhr && typeof options.fetch === 'object') {\n    xhr.setInit(options.fetch, options.useAbortSignal ?? true)\n  }\n\n  const headers = options.headers\n  const delays = options.timeout\n\n  // Request state\n  let aborted = false\n  let loaded = false\n  let timedOut = false\n\n  // Apply event handlers\n  xhr.onerror = (event: ProgressEvent) => {\n    onError(\n      new Error(\n        `Request error while attempting to reach ${options.url}${\n          event.lengthComputable ? `(${event.loaded} of ${event.total} bytes transferred)` : ''\n        }`,\n      ),\n    )\n  }\n  xhr.ontimeout = (event: ProgressEvent) => {\n    onError(\n      new Error(\n        `Request timeout while attempting to reach ${options.url}${\n          event.lengthComputable ? `(${event.loaded} of ${event.total} bytes transferred)` : ''\n        }`,\n      ),\n    )\n  }\n  xhr.onabort = () => {\n    stopTimers(true)\n    aborted = true\n  }\n\n  xhr.onreadystatechange = () => {\n    // Prevent request from timing out\n    resetTimers()\n\n    if (aborted || xhr.readyState !== 4) {\n      return\n    }\n\n    // Will be handled by onError\n    if (xhr.status === 0) {\n      return\n    }\n\n    onLoad()\n  }\n\n  // @todo two last options to open() is username/password\n  xhr.open(\n    options.method!,\n    options.url,\n    true, // Always async\n  )\n\n  // Some options need to be applied after open\n  xhr.withCredentials = !!options.withCredentials\n\n  // Set headers\n  if (headers && xhr.setRequestHeader) {\n    for (const key in headers) {\n      // eslint-disable-next-line no-prototype-builtins\n      if (headers.hasOwnProperty(key)) {\n        xhr.setRequestHeader(key, headers[key])\n      }\n    }\n  }\n\n  if (options.rawBody) {\n    xhr.responseType = 'arraybuffer'\n  }\n\n  // Let middleware know we're about to do a request\n  context.applyMiddleware('onRequest', {options, adapter, request: xhr, context})\n\n  xhr.send(options.body || null)\n\n  // Figure out which timeouts to use (if any)\n  if (delays) {\n    timers.connect = setTimeout(() => timeoutRequest('ETIMEDOUT'), delays.connect)\n  }\n\n  return {abort}\n\n  function abort() {\n    aborted = true\n\n    if (xhr) {\n      xhr.abort()\n    }\n  }\n\n  function timeoutRequest(code: any) {\n    timedOut = true\n    xhr.abort()\n    const error: any = new Error(\n      code === 'ESOCKETTIMEDOUT'\n        ? `Socket timed out on request to ${options.url}`\n        : `Connection timed out on request to ${options.url}`,\n    )\n    error.code = code\n    context.channels.error.publish(error)\n  }\n\n  function resetTimers() {\n    if (!delays) {\n      return\n    }\n\n    stopTimers()\n    timers.socket = setTimeout(() => timeoutRequest('ESOCKETTIMEDOUT'), delays.socket)\n  }\n\n  function stopTimers(force?: boolean) {\n    // Only clear the connect timeout if we've got a connection\n    if (force || aborted || (xhr.readyState >= 2 && timers.connect)) {\n      clearTimeout(timers.connect)\n    }\n\n    if (timers.socket) {\n      clearTimeout(timers.socket)\n    }\n  }\n\n  function onError(error: Error) {\n    if (loaded) {\n      return\n    }\n\n    // Clean up\n    stopTimers(true)\n    loaded = true\n    ;(xhr as any) = null\n\n    // Annoyingly, details are extremely scarce and hidden from us.\n    // We only really know that it is a network error\n    const err = (error ||\n      new Error(`Network error while attempting to reach ${options.url}`)) as Error & {\n      isNetworkError: boolean\n      request?: typeof options\n    }\n    err.isNetworkError = true\n    err.request = options\n    callback(err)\n  }\n\n  function reduceResponse(): MiddlewareResponse {\n    return {\n      body:\n        xhr.response ||\n        (xhr.responseType === '' || xhr.responseType === 'text' ? xhr.responseText : ''),\n      url: options.url,\n      method: options.method!,\n      headers: parseHeaders(xhr.getAllResponseHeaders()),\n      statusCode: xhr.status,\n      statusMessage: xhr.statusText,\n    }\n  }\n\n  function onLoad() {\n    if (aborted || loaded || timedOut) {\n      return\n    }\n\n    if (xhr.status === 0) {\n      onError(new Error('Unknown XHR error'))\n      return\n    }\n\n    // Prevent being called twice\n    stopTimers()\n    loaded = true\n    callback(null, reduceResponse())\n  }\n}\n","import {createRequester} from './createRequester'\nimport {httpRequester} from './request/browser-request'\nimport type {ExportEnv, HttpRequest, Middlewares, Requester} from './types'\n\nexport type * from './types'\n\n/** @public */\nexport const getIt = (\n  initMiddleware: Middlewares = [],\n  httpRequest: HttpRequest = httpRequester,\n): Requester => createRequester(initMiddleware, httpRequest)\n\n/** @public */\nexport const environment: ExportEnv = 'browser'\n\n/** @public */\nexport {adapter} from './request/browser-request'\n","import type {ExportEnv} from './types'\n\nexport * from './index.browser'\n\n/** @public */\nexport const environment: ExportEnv = 'react-server'\n"],"names":["_method","_url","_resHeaders","_headers","_controller","_init","_useAbortSignal","FetchXhr","constructor","__publicField","__privateAdd","open","method","url","_async","__privateSet","readyState","onreadystatechange","abort","__privateGet","getAllResponseHeaders","setRequestHeader","name","value","setInit","init","useAbortSignal","arguments","length","undefined","send","body","textBody","responseType","options","headers","AbortController","EventTarget","signal","document","credentials","withCredentials","fetch","then","res","forEach","key","concat","status","statusText","text","arrayBuffer","resBody","responseText","response","catch","err","_a","onabort","onerror","call","WeakMap","adapter","XMLHttpRequest","XmlHttpRequest","httpRequester","context","callback","opts","applyMiddleware","timers","injectedResponse","cbTimer","setTimeout","cancel","clearTimeout","xhr","delays","timeout","aborted","loaded","timedOut","event","onError","Error","lengthComputable","total","ontimeout","stopTimers","resetTimers","onLoad","hasOwnProperty","rawBody","request","connect","timeoutRequest","code","error","channels","publish","socket","force","isNetworkError","reduceResponse","parseHeaders","statusCode","statusMessage","getIt","initMiddleware","httpRequest","createRequester","environment"],"mappings":"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"}